rules_version = '2';

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                               STORAGE RULES                                         ///
///                              This document describes the storages rules                             ///
///  Documentation @see https://www.notion.so/cascade8/Firestore-rules-7ace8177995449e4896dae672892b477 ///
///////////////////////////////////////////////////////////////////////////////////////////////////////////


service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if false; // Everyting is forbidden by default
    }

    // This rule will prevent another user than the one logged in to update avatar
    // This also prevent any read/write on the watermark directory
    match /users/{userId} {

      match /avatar/{avatarId=**} { // @TODO (#3188) remove "=**" once migration 31 is done to allow only avatar/foo.png
      	allow read: if false;
        allow create, update: if request.auth.uid == userId && isValidIncomingImage();
        allow delete: if request.auth.uid == userId;  // @TODO (#3188) should be handled by a backend function
      }
      
      match /watermark/{watermarkId} {
        allow read, write: if false; // @TODO (#3188) make sure that imgix is used during screenings
      }

    }
    
    match /orgs/{orgId} {
      
      match /logo/{logoId=**} { // @TODO (#3188) remove "=**" once migration 31 is done to allow only logo/foo.png
      	allow read: if false;
        allow create, update: if request.auth != null && isValidIncomingImage(); // @TODO (#3188) update should not be allowed anywere, we need to make filename uniques
        allow delete: if request.auth != null; // @TODO (#3188) should be handled by a backend function
      }
    }

    // @TODO (#3188) Rules for movies are incomplete since we cannot link request.auth.uid 
    // with the documents we want to access (we only have movieId and cannot access DB here)
    match /movies/{movieId} {

      match /banner/{media=**} { // @TODO (#3188) remove "=**" once migration 31 is done to prevent deep file upload
      	allow read: if false;
        allow create, update: if request.auth != null && isValidIncomingImage();
        allow delete: if request.auth != null;// @TODO (#3188) should be handled by a backend function
      }

      match /poster/{media=**} { // @TODO (#3188) remove "=**" once migration 31 is done to prevent deep file upload
      	allow read: if false;
        allow create, update: if request.auth != null && isValidIncomingImage();
        allow delete: if request.auth != null;// @TODO (#3188) should be handled by a backend function
      }

      match /promotional.presentation_deck/{media=**} { // @TODO (#3188) remove "=**" once migration 31 is done to prevent deep file upload
      	allow read: if false;
        allow create, update: if request.auth != null && isValidIncomingPdf();
        allow delete: if request.auth != null;// @TODO (#3188) should be handled by a backend function
      }

      match /promotional.scenario/{media=**} { // @TODO (#3188) remove "=**" once migration 31 is done to prevent deep file upload
      	allow read: if false;
        allow create, update: if request.auth != null && isValidIncomingPdf();
        allow delete: if request.auth != null;// @TODO (#3188) should be handled by a backend function
      }

      /////////////////////
      // @TODO (#3188) remove the following blocks after migration 31
      //////////////////////

      match /promotionalElements.banner.media/{media=**} { 
      	allow read: if false;
        allow create, update: if request.auth != null && isValidIncomingPdf();
        allow delete: if request.auth != null;// @TODO (#3188) should be handled by a backend function
      }

      match /promotionalElements.poster.0.media/{media=**} { 
      	allow read: if false;
        allow create, update: if request.auth != null && isValidIncomingPdf();
        allow delete: if request.auth != null;// @TODO (#3188) should be handled by a backend function
      }
    }

    function isValidIncomingImage() {
    	// Only allow uploads of any image file that's less than 5MB
      return request.resource.contentType.matches('image/.*') && request.resource.size < 5 * 1024 * 1024;
    }
    
    function isValidIncomingPdf() {
    	// Only allow uploads of any image file that's less than 50MB
      return request.resource.contentType.matches('application/pdf') && request.resource.size < 50 * 1024 * 1024;
    }
    
  }
}

