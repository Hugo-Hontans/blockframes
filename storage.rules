rules_version = '2';

///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                               STORAGE RULES                                         ///
///                              This document describes the storages rules                             ///
///  Documentation @see https://www.notion.so/cascade8/Firestore-rules-7ace8177995449e4896dae672892b477 ///
///////////////////////////////////////////////////////////////////////////////////////////////////////////


service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if false; // Everyting is forbidden by default
    }

    // This rule will prevent another user than the one logged in to create avatar
    // This also prevent any read/write on the watermark directory
    match /public/users/{userId} {
      match /avatar/{avatarId} {
        allow read, update, delete: if false;
        allow create: if request.auth.uid == userId && isValidIncomingImage();
      }
      
      match /watermark/{watermarkId} {
        allow read, write: if false;
      }
    }
    
    match /public/orgs/{orgId} {
      match /logo/{logoId} {
        allow read, update, delete: if false;
        allow create: if request.auth != null && isValidIncomingImage();
      }
    }

    // @TODO (#3188) Rules for movies are incomplete since we cannot link request.auth.uid 
    // with the documents we want to access (we only have movieId and cannot access DB here)
    match /public/movies/{movieId} {
      match /banner/{media} {
        allow read, update, delete: if false;
        allow create: if request.auth != null && isValidIncomingImage();
      }

      match /poster/{media} {
        allow read, update, delete: if false;
        allow create: if request.auth != null && isValidIncomingImage();
      }

      match /promotional.presentation_deck/{media} {
        allow read, update, delete: if false;
        allow create: if request.auth != null && isValidIncomingPdf();
      }

      match /promotional.scenario/{media} {
        allow read, update, delete: if false;
        allow create: if request.auth != null && isValidIncomingPdf();
      }
    }

    // @TODO (#3188) Rules for movies are incomplete since we cannot link request.auth.uid 
    match /protected/movies/{movieId} {

      match /promotional.presentation_deck/{media} {
        allow read, update, delete: if false;
        allow create: if request.auth != null && isValidIncomingPdf();
      }

      match /promotional.scenario/{media} {
        allow read, update, delete: if false;
        allow create: if request.auth != null && isValidIncomingPdf();
      }
    }

    function isValidIncomingImage() {
    	// Only allow uploads of any image file that's less than 5MB
      return request.resource.contentType.matches('image/.*') && request.resource.size < 5 * 1024 * 1024;
    }
    
    function isValidIncomingPdf() {
    	// Only allow uploads of any image file that's less than 50MB
      return request.resource.contentType.matches('application/pdf') && request.resource.size < 50 * 1024 * 1024;
    }
    
  }
}

